var Common, SystemDService,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Common = require("./unit-common");

SystemDService = (function(_super) {
  __extends(SystemDService, _super);

  function SystemDService() {
    SystemDService.__super__.constructor.call(this, "Service");
  }

  SystemDService.prototype.addEnvironment = function(name, value) {
    SystemDService.assertString(name, "name");
    SystemDService.assertString(value, "value");
    return this.addPair("Environment", "" + name + "=" + value);
  };

  SystemDService.prototype.addType = function(value) {
    return this.addPair("Type", value);
  };

  SystemDService.prototype.addExecStart = function(value) {
    return this.addPair("ExecStart", value);
  };

  SystemDService.prototype.addExecStartPre = function(value) {
    return this.addPair("ExecStartPre", value);
  };

  SystemDService.prototype.addExecStartPost = function(value) {
    return this.addPair("ExecStartPost", value);
  };

  SystemDService.prototype.addExecReload = function(value) {
    return this.addPair("ExecReload", value);
  };

  SystemDService.prototype.addExecStop = function(value) {
    return this.addPair("ExecStop", value);
  };

  SystemDService.prototype.addExecStopPost = function(value) {
    return this.addPair("ExecStopPost", value);
  };

  SystemDService.prototype.addRestartSec = function(value) {
    if (typeof value === "number") {
      value = "" + (parseInt(value)) + "s";
    }
    return this.addPair("RestartSec", value);
  };

  SystemDService.prototype.addTimeoutStartSec = function(value) {
    if (typeof value === "number") {
      value = "" + (parseInt(value)) + "s";
    }
    return this.addPair("TimeoutStartSec", value);
  };

  SystemDService.prototype.addTimeoutStopSec = function(value) {
    if (typeof value === "number") {
      value = "" + (parseInt(value)) + "s";
    }
    return this.addPair("TimeoutStopSec", value);
  };

  SystemDService.prototype.addTimeoutSec = function(value) {
    if (typeof value === "number") {
      value = "" + (parseInt(value)) + "s";
    }
    return this.addPair("TimeoutSec", value);
  };

  SystemDService.prototype.addRestart = function(value) {
    return this.addPair("Restart", value);
  };

  SystemDService.prototype.addNotifyAccess = function(value) {
    return this.addPair("NotifyAccess", value);
  };

  SystemDService.prototype.addEnvironmentFile = function(value) {
    return this.addPair("EnvironmentFile", value);
  };

  SystemDService.prototype.addUser = function(value) {
    return this.addPair("User", value);
  };

  SystemDService.prototype.addLimitNoFile = function(value) {
    if (typeof value === "number") {
      value = "" + (parseInt(value));
    }
    return this.addPair("LimitNOFILE", value);
  };

  return SystemDService;

})(Common);

module.exports = SystemDService;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYnMvc2VydmljZS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQSxzQkFBQTtFQUFBO2lTQUFBOztBQUFBLE1BQUEsR0FBUyxPQUFBLENBQVEsZUFBUixDQUFULENBQUE7O0FBQUE7QUFLRSxtQ0FBQSxDQUFBOztBQUFhLEVBQUEsd0JBQUEsR0FBQTtBQUNYLElBQUEsZ0RBQU0sU0FBTixDQUFBLENBRFc7RUFBQSxDQUFiOztBQUFBLDJCQUdBLGNBQUEsR0FBZ0IsU0FBQyxJQUFELEVBQU8sS0FBUCxHQUFBO0FBQ2QsSUFBQSxjQUFjLENBQUMsWUFBZixDQUE0QixJQUE1QixFQUFrQyxNQUFsQyxDQUFBLENBQUE7QUFBQSxJQUNBLGNBQWMsQ0FBQyxZQUFmLENBQTRCLEtBQTVCLEVBQW1DLE9BQW5DLENBREEsQ0FBQTtXQUVBLElBQUMsQ0FBQSxPQUFELENBQVMsYUFBVCxFQUF3QixFQUFBLEdBQUcsSUFBSCxHQUFRLEdBQVIsR0FBVyxLQUFuQyxFQUhjO0VBQUEsQ0FIaEIsQ0FBQTs7QUFBQSwyQkFTQSxPQUFBLEdBQVMsU0FBQyxLQUFELEdBQUE7V0FDUCxJQUFDLENBQUEsT0FBRCxDQUFTLE1BQVQsRUFBaUIsS0FBakIsRUFETztFQUFBLENBVFQsQ0FBQTs7QUFBQSwyQkFhQSxZQUFBLEdBQWMsU0FBQyxLQUFELEdBQUE7V0FDWixJQUFDLENBQUEsT0FBRCxDQUFTLFdBQVQsRUFBc0IsS0FBdEIsRUFEWTtFQUFBLENBYmQsQ0FBQTs7QUFBQSwyQkFpQkEsZUFBQSxHQUFpQixTQUFDLEtBQUQsR0FBQTtXQUNmLElBQUMsQ0FBQSxPQUFELENBQVMsY0FBVCxFQUF5QixLQUF6QixFQURlO0VBQUEsQ0FqQmpCLENBQUE7O0FBQUEsMkJBcUJBLGdCQUFBLEdBQWtCLFNBQUMsS0FBRCxHQUFBO1dBQ2hCLElBQUMsQ0FBQSxPQUFELENBQVMsZUFBVCxFQUEwQixLQUExQixFQURnQjtFQUFBLENBckJsQixDQUFBOztBQUFBLDJCQXlC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QUF3QixLQUF4QixFQUhjO0VBQUEsQ0ExRWhCLENBQUE7O3dCQUFBOztHQUQyQixPQUo3QixDQUFBOztBQUFBLE1Bb0ZNLENBQUMsT0FBUCxHQUFpQixjQXBGakIsQ0FBQSIsImZpbGUiOiJsaWJzL3NlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJDb21tb24gPSByZXF1aXJlKFwiLi91bml0LWNvbW1vblwiKVxuXG4jIFBsZWFzZSBzZWUgb2ludGVyLmRlL3B1YmxpYy9zeXN0ZW1kLW1hbi9zeXN0ZW1kLnNlcnZpY2UuaHRtbFxuIyBmb3IgYW55IGFkZGl0aW9uYWwgb3B0aW9uc1xuY2xhc3MgU3lzdGVtRFNlcnZpY2UgZXh0ZW5kcyBDb21tb25cbiAgY29uc3RydWN0b3I6IC0+XG4gICAgc3VwZXIoXCJTZXJ2aWNlXCIpXG5cbiAgYWRkRW52aXJvbm1lbnQ6IChuYW1lLCB2YWx1ZSkgLT5cbiAgICBTeXN0ZW1EU2VydmljZS5hc3NlcnRTdHJpbmcobmFtZSwgXCJuYW1lXCIpXG4gICAgU3lzdGVtRFNlcnZpY2UuYXNzZXJ0U3RyaW5nKHZhbHVlLCBcInZhbHVlXCIpXG4gICAgQGFkZFBhaXIoXCJFbnZpcm9ubWVudFwiLCBcIiN7bmFtZX09I3t2YWx1ZX1cIilcblxuICAjIGh0dHA6Ly8wcG9pbnRlci5kZS9wdWJsaWMvc3lzdGVtZC1tYW4vc3lzdGVtZC5zZXJ2aWNlLmh0bWwjVHlwZT1cbiAgYWRkVHlwZTogKHZhbHVlKSAtPlxuICAgIEBhZGRQYWlyKFwiVHlwZVwiLCB2YWx1ZSlcblxuICAjIGh0dHA6Ly8wcG9pbnRlci5kZS9wdWJsaWMvc3lzdGVtZC1tYW4vc3lzdGVtZC5zZXJ2aWNlLmh0bWwjRXhlY1N0YXJ0PVxuICBhZGRFeGVjU3RhcnQ6ICh2YWx1ZSkgLT5cbiAgICBAYWRkUGFpcihcIkV4ZWNTdGFydFwiLCB2YWx1ZSlcblxuICAjIGh0dHA6Ly8wcG9pbnRlci5kZS9wdWJsaWMvc3lzdGVtZC1tYW4vc3lzdGVtZC5zZXJ2aWNlLmh0bWwjRXhlY1N0YXJ0UHJlPVxuICBhZGRFeGVjU3RhcnRQcmU6ICh2YWx1ZSkgLT5cbiAgICBAYWRkUGFpcihcIkV4ZWNTdGFydFByZVwiLCB2YWx1ZSlcblxuICAjIGh0dHA6Ly8wcG9pbnRlci5kZS9wdWJsaWMvc3lzdGVtZC1tYW4vc3lzdGVtZC5zZXJ2aWNlLmh0bWwjRXhlY1N0YXJ0UHJlPVxuICBhZGRFeGVjU3RhcnRQb3N0OiAodmFsdWUpIC0+XG4gICAgQGFkZFBhaXIoXCJFeGVjU3RhcnRQb3N0XCIsIHZhbHVlKVxuXG4gICMgaHR0cDovLzBwb2ludGVyLmRlL3B1YmxpYy9zeXN0ZW1kLW1hbi9zeXN0ZW1kLnNlcnZpY2UuaHRtbCNFeGVjUmVsb2FkPVxuICBhZGRFeGVjUmVsb2FkOiAodmFsdWUpIC0+XG4gICAgQGFkZFBhaXIoXCJFeGVjUmVsb2FkXCIsIHZhbHVlKVxuXG4gICMgaHR0cDovLzBwb2ludGVyLmRlL3B1YmxpYy9zeXN0ZW1kLW1hbi9zeXN0ZW1kLnNlcnZpY2UuaHRtbCNFeGVjU3RvcD1cbiAgYWRkRXhlY1N0b3A6ICh2YWx1ZSkgLT5cbiAgICBAYWRkUGFpcihcIkV4ZWNTdG9wXCIsIHZhbHVlKVxuXG4gICMgaHR0cDovLzBwb2ludGVyLmRlL3B1YmxpYy9zeXN0ZW1kLW1hbi9zeXN0ZW1kLnNlcnZpY2UuaHRtbCNFeGVjU3RvcFBvc3Q9XG4gIGFkZEV4ZWNTdG9wUG9zdDogKHZhbHVlKSAtPlxuICAgIEBhZGRQYWlyKFwiRXhlY1N0b3BQb3N0XCIsIHZhbHVlKVxuXG4gICMgaHR0cDovLzBwb2ludGVyLmRlL3B1YmxpYy9zeXN0ZW1kLW1hbi9zeXN0ZW1kLnNlcnZpY2UuaHRtbCNSZXN0YXJ0U2VjPVxuICBhZGRSZXN0YXJ0U2VjOiAodmFsdWUpIC0+XG4gICAgaWYgdHlwZW9mIHZhbHVlIGlzIFwibnVtYmVyXCJcbiAgICAgIHZhbHVlID0gXCIje3BhcnNlSW50KHZhbHVlKX1zXCJcbiAgICBAYWRkUGFpcihcIlJlc3RhcnRTZWNcIiwgdmFsdWUpXG5cbiAgIyBodHRwOi8vMHBvaW50ZXIuZGUvcHVibGljL3N5c3RlbWQtbWFuL3N5c3RlbWQuc2VydmljZS5odG1sI1RpbWVvdXRTdGFydFNlYz1cbiAgYWRkVGltZW91dFN0YXJ0U2VjOiAodmFsdWUpIC0+XG4gICAgaWYgdHlwZW9mIHZhbHVlIGlzIFwibnVtYmVyXCJcbiAgICAgIHZhbHVlID0gXCIje3BhcnNlSW50KHZhbHVlKX1zXCJcbiAgICBAYWRkUGFpcihcIlRpbWVvdXRTdGFydFNlY1wiLCB2YWx1ZSlcblxuICAjIGh0dHA6Ly8wcG9pbnRlci5kZS9wdWJsaWMvc3lzdGVtZC1tYW4vc3lzdGVtZC5zZXJ2aWNlLmh0bWwjVGltZW91dFN0b3BTZWM9XG4gIGFkZFRpbWVvdXRTdG9wU2VjOiAodmFsdWUpIC0+XG4gICAgaWYgdHlwZW9mIHZhbHVlIGlzIFwibnVtYmVyXCJcbiAgICAgIHZhbHVlID0gXCIje3BhcnNlSW50KHZhbHVlKX1zXCJcbiAgICBAYWRkUGFpcihcIlRpbWVvdXRTdG9wU2VjXCIsIHZhbHVlKVxuXG4gICMgaHR0cDovLzBwb2ludGVyLmRlL3B1YmxpYy9zeXN0ZW1kLW1hbi9zeXN0ZW1kLnNlcnZpY2UuaHRtbCNUaW1lb3V0U2VjPVxuICBhZGRUaW1lb3V0U2VjOiAodmFsdWUpIC0+XG4gICAgaWYgdHlwZW9mIHZhbHVlIGlzIFwibnVtYmVyXCJcbiAgICAgIHZhbHVlID0gXCIje3BhcnNlSW50KHZhbHVlKX1zXCJcbiAgICBAYWRkUGFpcihcIlRpbWVvdXRTZWNcIiwgdmFsdWUpXG5cbiAgIyBodHRwOi8vMHBvaW50ZXIuZGUvcHVibGljL3N5c3RlbWQtbWFuL3N5c3RlbWQuc2VydmljZS5odG1sI1Jlc3RhcnQ9XG4gIGFkZFJlc3RhcnQ6ICh2YWx1ZSkgLT5cbiAgICBAYWRkUGFpcihcIlJlc3RhcnRcIiwgdmFsdWUpXG5cbiAgIyBodHRwOi8vMHBvaW50ZXIuZGUvcHVibGljL3N5c3RlbWQtbWFuL3N5c3RlbWQuc2VydmljZS5odG1sI05vdGlmeUFjY2Vzcz1cbiAgYWRkTm90aWZ5QWNjZXNzOiAodmFsdWUpIC0+XG4gICAgQGFkZFBhaXIoXCJOb3RpZnlBY2Nlc3NcIiwgdmFsdWUpXG5cbiAgYWRkRW52aXJvbm1lbnRGaWxlOiAodmFsdWUpIC0+XG4gICAgQGFkZFBhaXIoXCJFbnZpcm9ubWVudEZpbGVcIiwgdmFsdWUpXG5cbiAgYWRkVXNlcjogKHZhbHVlKSAtPlxuICAgIEBhZGRQYWlyKFwiVXNlclwiLCB2YWx1ZSlcblxuICBhZGRMaW1pdE5vRmlsZTogKHZhbHVlKSAtPlxuICAgIGlmIHR5cGVvZiB2YWx1ZSBpcyBcIm51bWJlclwiXG4gICAgICB2YWx1ZSA9IFwiI3twYXJzZUludCh2YWx1ZSl9XCJcbiAgICBAYWRkUGFpcihcIkxpbWl0Tk9GSUxFXCIsIHZhbHVlKVxuXG5tb2R1bGUuZXhwb3J0cyA9IFN5c3RlbURTZXJ2aWNlIl19